Tools required:
Encoding/Decoding
CyberChef -> https://gchq.github.io/CyberChef/ 

Forensic tool to view files in binary
HxD -> https://mh-nexus.de/en/hxd/

MicroSoft SQL Server
View and query database -> https://www.microsoft.com/en-sg/sql-server/sql-server-downloads

Files uploaded to Sharepoint in general are stored in database in hexa-decimal (varbinary).

AV or endpoint protection solution might pick up malware signatures in temp folders (e.g ). Upon investigation, it is due to Sharepoint Search Crawl function that could be re-indexing the web application to the respetive web root folder.

To pin point the exact location of the malware, below are the steps

1. Identify filename
Sharepoint IIS logs were retrieved to look for malicious web request. We identified the malicious request to be from the Search Crawler via User Agent (MS+Search+6.0+Robot), where we see malicious file names such as /webshell.aspx, /cmd.aspx, etc

2. Identify database

As the Sharepoint could be hosting multiple web applications, there could be tons of database residing in the database server. Luckily database files are not totally encoded. We inspected the database file (.mdf) with a forensic tool at its binary level (e.g HxD or WinHex) to search for the string.
There is a search crawler database, where we found linkages to the web application storing the malicious files.

3. Inspecting database

You could reload the identified database in forensics tools again to verify if the malicious file names are inside.
AllDocs and Docs table contains the metadata of the files, including file name (LeafName), location (DirName), creation date (TimeCreated)
DocStreams table contains the payload of the web application files
- You may have to refer to the sharepoint documentation

3a. Looking for the payload via filename

In the AllDocs table, search for the relevant file name in (LeafName), and note the unique ID (Id).
This unique ID is linked to DocStream table, (DocID) column.
SQL query:
SELECT * FROM DocStreams WHERE DocId LIKE '<(Id) from Docs table>'

Quick tips: in SQL query, '%' is used to represent any characters, before and after.

3b. Looking for the payload via payload

We know that ASPX webshells commonly contains the keyword (Shell), and it is rarely used in real-world application, thus we can perform a search on this binary on the DocStreams table.
Converting "Shell" to hexadecimal to obtain 0x5368656C6C.
We also can't search for the encoded string similar to step 3a as the value of the Content column is in varbinary format, thus we have to convert its type to varchar(max).
SQL query:
SELECT * FROM DocStreams WHERE CONVERT(varchar(max), Content,2) LIKE '%5368656C6C%'
